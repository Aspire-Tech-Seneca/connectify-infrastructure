name: 'Terraform'

on:
  push:
    branches: [ "dev" ]

  pull_request:

permissions:
  id-token: write # Require write permission to Fetch an OIDC token.
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: dev
    env:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLIENT_ID:  ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_SECRET:  ${{ secrets.AZURE_SECRET }}
      AZURE_TENANT:  ${{ secrets.AZURE_TENANT }}
    
    strategy:
      matrix:
        dir: ["./management"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt 
        continue-on-error: true
        working-directory: ${{ matrix.dir }}


      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ matrix.dir }}

           
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ matrix.dir }}

      - name: SETUP | Create SSH Key
        working-directory: ${{ matrix.dir }}
        run: |
          mkdir -p key_pairs # Ensure the directory exists
          echo "${{ secrets.SSH_PUB_KP }}" > key_pairs/${{ secrets.VM_KP }}.pub
          chmod 600 key_pairs/${{ secrets.VM_KP }}.pub
      


      - name: SETUP | CREATE tfvars file
        working-directory: ${{ matrix.dir }}
        run: |
          echo 'subscription_id = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"' > terraform.tfvars
          echo 'region = "${{ secrets.REGION }}"' >> terraform.tfvars
          echo 'env = "dev"' >> terraform.tfvars
          echo 'vm_user = "${{ secrets.VM_USER }}"' >> terraform.tfvars
          echo 'vm_kp = "${{ secrets.VM_KP }}.pub"' >> terraform.tfvars
          echo 'vm_size = "Standard_B2s"' >> terraform.tfvars


      - name: AZURE | Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true


      - name: TF | Terraform Plan
        id: plan
        run: terraform plan --var-file="./terraform.tfvars" -input=false -no-color -out tf.plan
        working-directory: ${{ matrix.dir }} # Use your environment folder
        continue-on-error: true

      - name: Get result
        run: echo "${{ steps.validate.outputs.stdout }}"
      
      - name: TF | Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: ${{ matrix.dir }} # Use your environment folder
          
      - name: TF | Terraform Apply
        run: terraform apply --var-file="./terraform.tfvars" -input=false tf.plan
        working-directory: ${{ matrix.dir }} # Use your environment folder
        shell: bash

    #   - name: Notify Ansible Workflow
    #     if: success()
    #     uses: peter-evans/repository-dispatch@v2
    #     with:
    #       token: ${{ secrets.PAT_TOKEN }}
    #       repository: who1-dev/acs-project-ansible
    #       event-type: terraform_complete
    #       client-payload: '{"environment": "prod"}'